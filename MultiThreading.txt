#####################################################################################################################################
Topics to Cover 
#####################################################################################################################################

General concurrency and multithreading theory:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Multithreading Benefits
Multithreading Costs
Concurrency Models
Same-threading
Concurrency vs. Parallelism

The basics of Java concurrency:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Creating and Starting Java Threads
Race Conditions and Critical Sections
Thread Safety and Shared Resources
Thread Safety and Immutability
Java Memory Model
Java Synchronized Blocks
Java Volatile Keyword
Java ThreadLocal
Java Thread Signaling

Typical problems in Java concurrency:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Deadlock
Deadlock Prevention
Starvation and Fairness
Nested Monitor Lockout
Slipped Conditions

Java concurrency constructs that help against the issues above:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Locks in Java
Read / Write Locks in Java
Reentrance Lockout
Semaphores
Blocking Queues
Thread Pools
Compare and Swap

Further topics:
~~~~~~~~~~~~~~~
Anatomy of a Synchronizer
Non-blocking Algorithms
Amdahl's Law

####################################################################################################################################

####################################################################################################################################

1. History of multithreading :
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Old days :
1 CPU :
Stage 1:  Running single program : CPU was only capable of executing 1 task at a time in the begninning.
Stage 2:  Running multiple programs : CPU is shared between the programs. OS switched between execution of multiple programs which looked           like they are getting executed paralelly to the users. This was beginning of Multi-tasking.
          Multi-tasking CONS : resource must be released by program that is not being used by it. Program cannot assume it will have                 access to the resource all the time.
Stage 3 : Running multiple threads : A single program can have multiple threads of execution inside it. It's similar to multiple CPU                 executing program. Since multiple threads are reading and writing from memory of a program it can result in data corruption.With           multi-core processesor(single chip having multiple CPU) each thread/task can be delegated to a different core/CPU. It is                   important to understand how threads access shared resources.

2. Multi-Threading benifits:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-> Better resource utilisation
Say a program needs to read 2 files and process them. Following is the first way it is performed :
5 sec - Read A.txt
2 sec - Process A.txt
5 sec - Read B.txt
2 sec - Process B.txt
Overall 14 sec
Generally when input is read from IO the CPU is idle waiting for the operation to complete. It can work on other tasks meanwhile, so
re-arranging the events we can have

5 sec - Read A.txt
5 sec - Read B.txt - 2 sec - Process A.txt
2 sec - Process B.txt
Overall 12 sec.
At step-2 we have better utilised the capabilites of CPU which has improved the performance. Network and Disk IO are slower than CPU and memory IO.

-> Simpler program design in some scenarios

-> More responsive programs
General way of request handling by server
while(server is active)
{
listen to request
process request
}

If the processing takes time, server cannot handle more input request

while(server is active)
{
listen to request
HANDLE REQUEST TO WORKER THREAD
}
The worker thread will respond to request when processing on the request is done. This will allow the main thread of execution to handle
more requests.

3. Multi-threading costs:
~~~~~~~~~~~~~~~~~~~~~~~~~

-> More complex design :
Code must be written in a thread-safe manner and the issues caused at run-time are hard to re-pro and analyse.
-> Context switching :
When a CPU switches between threads, it has to save the state, pointers of next thread to execute, local data etc. This is known as Context switching and operations involved to perform above things is costly.
-> More resources consumption :
Threads have local memory. A program that has multiple threads takes up a lot of memory even when the threads don't do much of a task. So threads creation,management consume a lot of CPU time and memory.



